// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/12/2020 23:28:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Sixteen_Bit_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sixteen_Bit_CPU_vlg_sample_tst(
	Add_IN,
	CLK,
	CLR,
	CS,
	Input,
	WR,
	sampler_tx
);
input [3:0] Add_IN;
input  CLK;
input  CLR;
input  CS;
input [15:0] Input;
input  WR;
output sampler_tx;

reg sample;
time current_time;
always @(Add_IN or CLK or CLR or CS or Input or WR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Sixteen_Bit_CPU_vlg_check_tst (
	ABUS_O,
	ALU_OUT,
	Code_IR,
	EDR_O,
	ERROR,
	ESUM_O,
	IDR_O,
	IIR_O,
	IMAR_O,
	IPC_O,
	ISUM_O,
	Nege,
	Over,
	R_O,
	STOP,
	Tap,
	W_O,
	Zero,
	sampler_rx
);
input [3:0] ABUS_O;
input [15:0] ALU_OUT;
input [3:0] Code_IR;
input  EDR_O;
input  ERROR;
input  ESUM_O;
input  IDR_O;
input  IIR_O;
input  IMAR_O;
input  IPC_O;
input  ISUM_O;
input  Nege;
input  Over;
input  R_O;
input  STOP;
input [7:0] Tap;
input  W_O;
input  Zero;
input sampler_rx;

reg [3:0] ABUS_O_expected;
reg [15:0] ALU_OUT_expected;
reg [3:0] Code_IR_expected;
reg  EDR_O_expected;
reg  ERROR_expected;
reg  ESUM_O_expected;
reg  IDR_O_expected;
reg  IIR_O_expected;
reg  IMAR_O_expected;
reg  IPC_O_expected;
reg  ISUM_O_expected;
reg  Nege_expected;
reg  Over_expected;
reg  R_O_expected;
reg  STOP_expected;
reg [7:0] Tap_expected;
reg  W_O_expected;
reg  Zero_expected;

reg [3:0] ABUS_O_prev;
reg [15:0] ALU_OUT_prev;
reg [3:0] Code_IR_prev;
reg  EDR_O_prev;
reg  ERROR_prev;
reg  ESUM_O_prev;
reg  IDR_O_prev;
reg  IIR_O_prev;
reg  IMAR_O_prev;
reg  IPC_O_prev;
reg  ISUM_O_prev;
reg  Nege_prev;
reg  Over_prev;
reg  R_O_prev;
reg  STOP_prev;
reg [7:0] Tap_prev;
reg  W_O_prev;
reg  Zero_prev;

reg [3:0] ABUS_O_expected_prev;
reg [15:0] ALU_OUT_expected_prev;
reg [3:0] Code_IR_expected_prev;
reg  EDR_O_expected_prev;
reg  ERROR_expected_prev;
reg  ESUM_O_expected_prev;
reg  IDR_O_expected_prev;
reg  IIR_O_expected_prev;
reg  IMAR_O_expected_prev;
reg  IPC_O_expected_prev;
reg  ISUM_O_expected_prev;
reg  Nege_expected_prev;
reg  Over_expected_prev;
reg  R_O_expected_prev;
reg  STOP_expected_prev;
reg [7:0] Tap_expected_prev;
reg  W_O_expected_prev;
reg  Zero_expected_prev;

reg [3:0] last_ABUS_O_exp;
reg [15:0] last_ALU_OUT_exp;
reg [3:0] last_Code_IR_exp;
reg  last_EDR_O_exp;
reg  last_ERROR_exp;
reg  last_ESUM_O_exp;
reg  last_IDR_O_exp;
reg  last_IIR_O_exp;
reg  last_IMAR_O_exp;
reg  last_IPC_O_exp;
reg  last_ISUM_O_exp;
reg  last_Nege_exp;
reg  last_Over_exp;
reg  last_R_O_exp;
reg  last_STOP_exp;
reg [7:0] last_Tap_exp;
reg  last_W_O_exp;
reg  last_Zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	ABUS_O_prev = ABUS_O;
	ALU_OUT_prev = ALU_OUT;
	Code_IR_prev = Code_IR;
	EDR_O_prev = EDR_O;
	ERROR_prev = ERROR;
	ESUM_O_prev = ESUM_O;
	IDR_O_prev = IDR_O;
	IIR_O_prev = IIR_O;
	IMAR_O_prev = IMAR_O;
	IPC_O_prev = IPC_O;
	ISUM_O_prev = ISUM_O;
	Nege_prev = Nege;
	Over_prev = Over;
	R_O_prev = R_O;
	STOP_prev = STOP;
	Tap_prev = Tap;
	W_O_prev = W_O;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	ABUS_O_expected_prev = ABUS_O_expected;
	ALU_OUT_expected_prev = ALU_OUT_expected;
	Code_IR_expected_prev = Code_IR_expected;
	EDR_O_expected_prev = EDR_O_expected;
	ERROR_expected_prev = ERROR_expected;
	ESUM_O_expected_prev = ESUM_O_expected;
	IDR_O_expected_prev = IDR_O_expected;
	IIR_O_expected_prev = IIR_O_expected;
	IMAR_O_expected_prev = IMAR_O_expected;
	IPC_O_expected_prev = IPC_O_expected;
	ISUM_O_expected_prev = ISUM_O_expected;
	Nege_expected_prev = Nege_expected;
	Over_expected_prev = Over_expected;
	R_O_expected_prev = R_O_expected;
	STOP_expected_prev = STOP_expected;
	Tap_expected_prev = Tap_expected;
	W_O_expected_prev = W_O_expected;
	Zero_expected_prev = Zero_expected;
end


// expected ALU_OUT[ 15 ]
initial
begin
	ALU_OUT_expected[15] = 1'bX;
end 
// expected ALU_OUT[ 14 ]
initial
begin
	ALU_OUT_expected[14] = 1'bX;
end 
// expected ALU_OUT[ 13 ]
initial
begin
	ALU_OUT_expected[13] = 1'bX;
end 
// expected ALU_OUT[ 12 ]
initial
begin
	ALU_OUT_expected[12] = 1'bX;
end 
// expected ALU_OUT[ 11 ]
initial
begin
	ALU_OUT_expected[11] = 1'bX;
end 
// expected ALU_OUT[ 10 ]
initial
begin
	ALU_OUT_expected[10] = 1'bX;
end 
// expected ALU_OUT[ 9 ]
initial
begin
	ALU_OUT_expected[9] = 1'bX;
end 
// expected ALU_OUT[ 8 ]
initial
begin
	ALU_OUT_expected[8] = 1'bX;
end 
// expected ALU_OUT[ 7 ]
initial
begin
	ALU_OUT_expected[7] = 1'bX;
end 
// expected ALU_OUT[ 6 ]
initial
begin
	ALU_OUT_expected[6] = 1'bX;
end 
// expected ALU_OUT[ 5 ]
initial
begin
	ALU_OUT_expected[5] = 1'bX;
end 
// expected ALU_OUT[ 4 ]
initial
begin
	ALU_OUT_expected[4] = 1'bX;
end 
// expected ALU_OUT[ 3 ]
initial
begin
	ALU_OUT_expected[3] = 1'bX;
end 
// expected ALU_OUT[ 2 ]
initial
begin
	ALU_OUT_expected[2] = 1'bX;
end 
// expected ALU_OUT[ 1 ]
initial
begin
	ALU_OUT_expected[1] = 1'bX;
end 
// expected ALU_OUT[ 0 ]
initial
begin
	ALU_OUT_expected[0] = 1'bX;
end 

// expected Nege
initial
begin
	Nege_expected = 1'bX;
end 

// expected Over
initial
begin
	Over_expected = 1'bX;
end 

// expected Zero
initial
begin
	Zero_expected = 1'bX;
end 

// expected ERROR
initial
begin
	ERROR_expected = 1'bX;
end 

// expected STOP
initial
begin
	STOP_expected = 1'bX;
end 
// expected ABUS_O[ 3 ]
initial
begin
	ABUS_O_expected[3] = 1'bX;
end 
// expected ABUS_O[ 2 ]
initial
begin
	ABUS_O_expected[2] = 1'bX;
end 
// expected ABUS_O[ 1 ]
initial
begin
	ABUS_O_expected[1] = 1'bX;
end 
// expected ABUS_O[ 0 ]
initial
begin
	ABUS_O_expected[0] = 1'bX;
end 
// expected Code_IR[ 3 ]
initial
begin
	Code_IR_expected[3] = 1'bX;
end 
// expected Code_IR[ 2 ]
initial
begin
	Code_IR_expected[2] = 1'bX;
end 
// expected Code_IR[ 1 ]
initial
begin
	Code_IR_expected[1] = 1'bX;
end 
// expected Code_IR[ 0 ]
initial
begin
	Code_IR_expected[0] = 1'bX;
end 

// expected EDR_O
initial
begin
	EDR_O_expected = 1'bX;
end 

// expected ESUM_O
initial
begin
	ESUM_O_expected = 1'bX;
end 

// expected IDR_O
initial
begin
	IDR_O_expected = 1'bX;
end 

// expected IIR_O
initial
begin
	IIR_O_expected = 1'bX;
end 

// expected IMAR_O
initial
begin
	IMAR_O_expected = 1'bX;
end 

// expected IPC_O
initial
begin
	IPC_O_expected = 1'bX;
end 

// expected ISUM_O
initial
begin
	ISUM_O_expected = 1'bX;
end 

// expected R_O
initial
begin
	R_O_expected = 1'bX;
end 
// expected Tap[ 7 ]
initial
begin
	Tap_expected[7] = 1'bX;
end 
// expected Tap[ 6 ]
initial
begin
	Tap_expected[6] = 1'bX;
end 
// expected Tap[ 5 ]
initial
begin
	Tap_expected[5] = 1'bX;
end 
// expected Tap[ 4 ]
initial
begin
	Tap_expected[4] = 1'bX;
end 
// expected Tap[ 3 ]
initial
begin
	Tap_expected[3] = 1'bX;
end 
// expected Tap[ 2 ]
initial
begin
	Tap_expected[2] = 1'bX;
end 
// expected Tap[ 1 ]
initial
begin
	Tap_expected[1] = 1'bX;
end 
// expected Tap[ 0 ]
initial
begin
	Tap_expected[0] = 1'bX;
end 

// expected W_O
initial
begin
	W_O_expected = 1'bX;
end 
// generate trigger
always @(ABUS_O_expected or ABUS_O or ALU_OUT_expected or ALU_OUT or Code_IR_expected or Code_IR or EDR_O_expected or EDR_O or ERROR_expected or ERROR or ESUM_O_expected or ESUM_O or IDR_O_expected or IDR_O or IIR_O_expected or IIR_O or IMAR_O_expected or IMAR_O or IPC_O_expected or IPC_O or ISUM_O_expected or ISUM_O or Nege_expected or Nege or Over_expected or Over or R_O_expected or R_O or STOP_expected or STOP or Tap_expected or Tap or W_O_expected or W_O or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ABUS_O = %b | expected ALU_OUT = %b | expected Code_IR = %b | expected EDR_O = %b | expected ERROR = %b | expected ESUM_O = %b | expected IDR_O = %b | expected IIR_O = %b | expected IMAR_O = %b | expected IPC_O = %b | expected ISUM_O = %b | expected Nege = %b | expected Over = %b | expected R_O = %b | expected STOP = %b | expected Tap = %b | expected W_O = %b | expected Zero = %b | ",ABUS_O_expected_prev,ALU_OUT_expected_prev,Code_IR_expected_prev,EDR_O_expected_prev,ERROR_expected_prev,ESUM_O_expected_prev,IDR_O_expected_prev,IIR_O_expected_prev,IMAR_O_expected_prev,IPC_O_expected_prev,ISUM_O_expected_prev,Nege_expected_prev,Over_expected_prev,R_O_expected_prev,STOP_expected_prev,Tap_expected_prev,W_O_expected_prev,Zero_expected_prev);
	$display("| real ABUS_O = %b | real ALU_OUT = %b | real Code_IR = %b | real EDR_O = %b | real ERROR = %b | real ESUM_O = %b | real IDR_O = %b | real IIR_O = %b | real IMAR_O = %b | real IPC_O = %b | real ISUM_O = %b | real Nege = %b | real Over = %b | real R_O = %b | real STOP = %b | real Tap = %b | real W_O = %b | real Zero = %b | ",ABUS_O_prev,ALU_OUT_prev,Code_IR_prev,EDR_O_prev,ERROR_prev,ESUM_O_prev,IDR_O_prev,IIR_O_prev,IMAR_O_prev,IPC_O_prev,ISUM_O_prev,Nege_prev,Over_prev,R_O_prev,STOP_prev,Tap_prev,W_O_prev,Zero_prev);
`endif
	if (
		( ABUS_O_expected_prev[0] !== 1'bx ) && ( ABUS_O_prev[0] !== ABUS_O_expected_prev[0] )
		&& ((ABUS_O_expected_prev[0] !== last_ABUS_O_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS_O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_O_expected_prev);
		$display ("     Real value = %b", ABUS_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_O_exp[0] = ABUS_O_expected_prev[0];
	end
	if (
		( ABUS_O_expected_prev[1] !== 1'bx ) && ( ABUS_O_prev[1] !== ABUS_O_expected_prev[1] )
		&& ((ABUS_O_expected_prev[1] !== last_ABUS_O_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS_O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_O_expected_prev);
		$display ("     Real value = %b", ABUS_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_O_exp[1] = ABUS_O_expected_prev[1];
	end
	if (
		( ABUS_O_expected_prev[2] !== 1'bx ) && ( ABUS_O_prev[2] !== ABUS_O_expected_prev[2] )
		&& ((ABUS_O_expected_prev[2] !== last_ABUS_O_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS_O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_O_expected_prev);
		$display ("     Real value = %b", ABUS_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_O_exp[2] = ABUS_O_expected_prev[2];
	end
	if (
		( ABUS_O_expected_prev[3] !== 1'bx ) && ( ABUS_O_prev[3] !== ABUS_O_expected_prev[3] )
		&& ((ABUS_O_expected_prev[3] !== last_ABUS_O_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABUS_O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABUS_O_expected_prev);
		$display ("     Real value = %b", ABUS_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ABUS_O_exp[3] = ABUS_O_expected_prev[3];
	end
	if (
		( ALU_OUT_expected_prev[0] !== 1'bx ) && ( ALU_OUT_prev[0] !== ALU_OUT_expected_prev[0] )
		&& ((ALU_OUT_expected_prev[0] !== last_ALU_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[0] = ALU_OUT_expected_prev[0];
	end
	if (
		( ALU_OUT_expected_prev[1] !== 1'bx ) && ( ALU_OUT_prev[1] !== ALU_OUT_expected_prev[1] )
		&& ((ALU_OUT_expected_prev[1] !== last_ALU_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[1] = ALU_OUT_expected_prev[1];
	end
	if (
		( ALU_OUT_expected_prev[2] !== 1'bx ) && ( ALU_OUT_prev[2] !== ALU_OUT_expected_prev[2] )
		&& ((ALU_OUT_expected_prev[2] !== last_ALU_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[2] = ALU_OUT_expected_prev[2];
	end
	if (
		( ALU_OUT_expected_prev[3] !== 1'bx ) && ( ALU_OUT_prev[3] !== ALU_OUT_expected_prev[3] )
		&& ((ALU_OUT_expected_prev[3] !== last_ALU_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[3] = ALU_OUT_expected_prev[3];
	end
	if (
		( ALU_OUT_expected_prev[4] !== 1'bx ) && ( ALU_OUT_prev[4] !== ALU_OUT_expected_prev[4] )
		&& ((ALU_OUT_expected_prev[4] !== last_ALU_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[4] = ALU_OUT_expected_prev[4];
	end
	if (
		( ALU_OUT_expected_prev[5] !== 1'bx ) && ( ALU_OUT_prev[5] !== ALU_OUT_expected_prev[5] )
		&& ((ALU_OUT_expected_prev[5] !== last_ALU_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[5] = ALU_OUT_expected_prev[5];
	end
	if (
		( ALU_OUT_expected_prev[6] !== 1'bx ) && ( ALU_OUT_prev[6] !== ALU_OUT_expected_prev[6] )
		&& ((ALU_OUT_expected_prev[6] !== last_ALU_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[6] = ALU_OUT_expected_prev[6];
	end
	if (
		( ALU_OUT_expected_prev[7] !== 1'bx ) && ( ALU_OUT_prev[7] !== ALU_OUT_expected_prev[7] )
		&& ((ALU_OUT_expected_prev[7] !== last_ALU_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[7] = ALU_OUT_expected_prev[7];
	end
	if (
		( ALU_OUT_expected_prev[8] !== 1'bx ) && ( ALU_OUT_prev[8] !== ALU_OUT_expected_prev[8] )
		&& ((ALU_OUT_expected_prev[8] !== last_ALU_OUT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[8] = ALU_OUT_expected_prev[8];
	end
	if (
		( ALU_OUT_expected_prev[9] !== 1'bx ) && ( ALU_OUT_prev[9] !== ALU_OUT_expected_prev[9] )
		&& ((ALU_OUT_expected_prev[9] !== last_ALU_OUT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[9] = ALU_OUT_expected_prev[9];
	end
	if (
		( ALU_OUT_expected_prev[10] !== 1'bx ) && ( ALU_OUT_prev[10] !== ALU_OUT_expected_prev[10] )
		&& ((ALU_OUT_expected_prev[10] !== last_ALU_OUT_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[10] = ALU_OUT_expected_prev[10];
	end
	if (
		( ALU_OUT_expected_prev[11] !== 1'bx ) && ( ALU_OUT_prev[11] !== ALU_OUT_expected_prev[11] )
		&& ((ALU_OUT_expected_prev[11] !== last_ALU_OUT_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[11] = ALU_OUT_expected_prev[11];
	end
	if (
		( ALU_OUT_expected_prev[12] !== 1'bx ) && ( ALU_OUT_prev[12] !== ALU_OUT_expected_prev[12] )
		&& ((ALU_OUT_expected_prev[12] !== last_ALU_OUT_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[12] = ALU_OUT_expected_prev[12];
	end
	if (
		( ALU_OUT_expected_prev[13] !== 1'bx ) && ( ALU_OUT_prev[13] !== ALU_OUT_expected_prev[13] )
		&& ((ALU_OUT_expected_prev[13] !== last_ALU_OUT_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[13] = ALU_OUT_expected_prev[13];
	end
	if (
		( ALU_OUT_expected_prev[14] !== 1'bx ) && ( ALU_OUT_prev[14] !== ALU_OUT_expected_prev[14] )
		&& ((ALU_OUT_expected_prev[14] !== last_ALU_OUT_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[14] = ALU_OUT_expected_prev[14];
	end
	if (
		( ALU_OUT_expected_prev[15] !== 1'bx ) && ( ALU_OUT_prev[15] !== ALU_OUT_expected_prev[15] )
		&& ((ALU_OUT_expected_prev[15] !== last_ALU_OUT_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[15] = ALU_OUT_expected_prev[15];
	end
	if (
		( Code_IR_expected_prev[0] !== 1'bx ) && ( Code_IR_prev[0] !== Code_IR_expected_prev[0] )
		&& ((Code_IR_expected_prev[0] !== last_Code_IR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Code_IR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Code_IR_expected_prev);
		$display ("     Real value = %b", Code_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Code_IR_exp[0] = Code_IR_expected_prev[0];
	end
	if (
		( Code_IR_expected_prev[1] !== 1'bx ) && ( Code_IR_prev[1] !== Code_IR_expected_prev[1] )
		&& ((Code_IR_expected_prev[1] !== last_Code_IR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Code_IR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Code_IR_expected_prev);
		$display ("     Real value = %b", Code_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Code_IR_exp[1] = Code_IR_expected_prev[1];
	end
	if (
		( Code_IR_expected_prev[2] !== 1'bx ) && ( Code_IR_prev[2] !== Code_IR_expected_prev[2] )
		&& ((Code_IR_expected_prev[2] !== last_Code_IR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Code_IR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Code_IR_expected_prev);
		$display ("     Real value = %b", Code_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Code_IR_exp[2] = Code_IR_expected_prev[2];
	end
	if (
		( Code_IR_expected_prev[3] !== 1'bx ) && ( Code_IR_prev[3] !== Code_IR_expected_prev[3] )
		&& ((Code_IR_expected_prev[3] !== last_Code_IR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Code_IR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Code_IR_expected_prev);
		$display ("     Real value = %b", Code_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Code_IR_exp[3] = Code_IR_expected_prev[3];
	end
	if (
		( EDR_O_expected_prev !== 1'bx ) && ( EDR_O_prev !== EDR_O_expected_prev )
		&& ((EDR_O_expected_prev !== last_EDR_O_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EDR_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EDR_O_expected_prev);
		$display ("     Real value = %b", EDR_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EDR_O_exp = EDR_O_expected_prev;
	end
	if (
		( ERROR_expected_prev !== 1'bx ) && ( ERROR_prev !== ERROR_expected_prev )
		&& ((ERROR_expected_prev !== last_ERROR_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ERROR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ERROR_expected_prev);
		$display ("     Real value = %b", ERROR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ERROR_exp = ERROR_expected_prev;
	end
	if (
		( ESUM_O_expected_prev !== 1'bx ) && ( ESUM_O_prev !== ESUM_O_expected_prev )
		&& ((ESUM_O_expected_prev !== last_ESUM_O_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESUM_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESUM_O_expected_prev);
		$display ("     Real value = %b", ESUM_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ESUM_O_exp = ESUM_O_expected_prev;
	end
	if (
		( IDR_O_expected_prev !== 1'bx ) && ( IDR_O_prev !== IDR_O_expected_prev )
		&& ((IDR_O_expected_prev !== last_IDR_O_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IDR_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IDR_O_expected_prev);
		$display ("     Real value = %b", IDR_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IDR_O_exp = IDR_O_expected_prev;
	end
	if (
		( IIR_O_expected_prev !== 1'bx ) && ( IIR_O_prev !== IIR_O_expected_prev )
		&& ((IIR_O_expected_prev !== last_IIR_O_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IIR_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IIR_O_expected_prev);
		$display ("     Real value = %b", IIR_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IIR_O_exp = IIR_O_expected_prev;
	end
	if (
		( IMAR_O_expected_prev !== 1'bx ) && ( IMAR_O_prev !== IMAR_O_expected_prev )
		&& ((IMAR_O_expected_prev !== last_IMAR_O_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMAR_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMAR_O_expected_prev);
		$display ("     Real value = %b", IMAR_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IMAR_O_exp = IMAR_O_expected_prev;
	end
	if (
		( IPC_O_expected_prev !== 1'bx ) && ( IPC_O_prev !== IPC_O_expected_prev )
		&& ((IPC_O_expected_prev !== last_IPC_O_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IPC_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IPC_O_expected_prev);
		$display ("     Real value = %b", IPC_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IPC_O_exp = IPC_O_expected_prev;
	end
	if (
		( ISUM_O_expected_prev !== 1'bx ) && ( ISUM_O_prev !== ISUM_O_expected_prev )
		&& ((ISUM_O_expected_prev !== last_ISUM_O_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ISUM_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ISUM_O_expected_prev);
		$display ("     Real value = %b", ISUM_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ISUM_O_exp = ISUM_O_expected_prev;
	end
	if (
		( Nege_expected_prev !== 1'bx ) && ( Nege_prev !== Nege_expected_prev )
		&& ((Nege_expected_prev !== last_Nege_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Nege :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Nege_expected_prev);
		$display ("     Real value = %b", Nege_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Nege_exp = Nege_expected_prev;
	end
	if (
		( Over_expected_prev !== 1'bx ) && ( Over_prev !== Over_expected_prev )
		&& ((Over_expected_prev !== last_Over_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Over :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Over_expected_prev);
		$display ("     Real value = %b", Over_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Over_exp = Over_expected_prev;
	end
	if (
		( R_O_expected_prev !== 1'bx ) && ( R_O_prev !== R_O_expected_prev )
		&& ((R_O_expected_prev !== last_R_O_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_O_expected_prev);
		$display ("     Real value = %b", R_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R_O_exp = R_O_expected_prev;
	end
	if (
		( STOP_expected_prev !== 1'bx ) && ( STOP_prev !== STOP_expected_prev )
		&& ((STOP_expected_prev !== last_STOP_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STOP_expected_prev);
		$display ("     Real value = %b", STOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_STOP_exp = STOP_expected_prev;
	end
	if (
		( Tap_expected_prev[0] !== 1'bx ) && ( Tap_prev[0] !== Tap_expected_prev[0] )
		&& ((Tap_expected_prev[0] !== last_Tap_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[0] = Tap_expected_prev[0];
	end
	if (
		( Tap_expected_prev[1] !== 1'bx ) && ( Tap_prev[1] !== Tap_expected_prev[1] )
		&& ((Tap_expected_prev[1] !== last_Tap_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[1] = Tap_expected_prev[1];
	end
	if (
		( Tap_expected_prev[2] !== 1'bx ) && ( Tap_prev[2] !== Tap_expected_prev[2] )
		&& ((Tap_expected_prev[2] !== last_Tap_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[2] = Tap_expected_prev[2];
	end
	if (
		( Tap_expected_prev[3] !== 1'bx ) && ( Tap_prev[3] !== Tap_expected_prev[3] )
		&& ((Tap_expected_prev[3] !== last_Tap_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[3] = Tap_expected_prev[3];
	end
	if (
		( Tap_expected_prev[4] !== 1'bx ) && ( Tap_prev[4] !== Tap_expected_prev[4] )
		&& ((Tap_expected_prev[4] !== last_Tap_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[4] = Tap_expected_prev[4];
	end
	if (
		( Tap_expected_prev[5] !== 1'bx ) && ( Tap_prev[5] !== Tap_expected_prev[5] )
		&& ((Tap_expected_prev[5] !== last_Tap_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[5] = Tap_expected_prev[5];
	end
	if (
		( Tap_expected_prev[6] !== 1'bx ) && ( Tap_prev[6] !== Tap_expected_prev[6] )
		&& ((Tap_expected_prev[6] !== last_Tap_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[6] = Tap_expected_prev[6];
	end
	if (
		( Tap_expected_prev[7] !== 1'bx ) && ( Tap_prev[7] !== Tap_expected_prev[7] )
		&& ((Tap_expected_prev[7] !== last_Tap_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tap[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tap_expected_prev);
		$display ("     Real value = %b", Tap_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Tap_exp[7] = Tap_expected_prev[7];
	end
	if (
		( W_O_expected_prev !== 1'bx ) && ( W_O_prev !== W_O_expected_prev )
		&& ((W_O_expected_prev !== last_W_O_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_O_expected_prev);
		$display ("     Real value = %b", W_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_W_O_exp = W_O_expected_prev;
	end
	if (
		( Zero_expected_prev !== 1'bx ) && ( Zero_prev !== Zero_expected_prev )
		&& ((Zero_expected_prev !== last_Zero_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Zero_expected_prev);
		$display ("     Real value = %b", Zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Zero_exp = Zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Sixteen_Bit_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Add_IN;
reg CLK;
reg CLR;
reg CS;
reg [15:0] Input;
reg WR;
// wires                                               
wire [3:0] ABUS_O;
wire [15:0] ALU_OUT;
wire [3:0] Code_IR;
wire EDR_O;
wire ERROR;
wire ESUM_O;
wire IDR_O;
wire IIR_O;
wire IMAR_O;
wire IPC_O;
wire ISUM_O;
wire Nege;
wire Over;
wire R_O;
wire STOP;
wire [7:0] Tap;
wire W_O;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
Sixteen_Bit_CPU i1 (
// port map - connection between master ports and signals/registers   
	.ABUS_O(ABUS_O),
	.Add_IN(Add_IN),
	.ALU_OUT(ALU_OUT),
	.CLK(CLK),
	.CLR(CLR),
	.Code_IR(Code_IR),
	.CS(CS),
	.EDR_O(EDR_O),
	.ERROR(ERROR),
	.ESUM_O(ESUM_O),
	.IDR_O(IDR_O),
	.IIR_O(IIR_O),
	.IMAR_O(IMAR_O),
	.\Input (Input),
	.IPC_O(IPC_O),
	.ISUM_O(ISUM_O),
	.Nege(Nege),
	.Over(Over),
	.R_O(R_O),
	.STOP(STOP),
	.Tap(Tap),
	.W_O(W_O),
	.WR(WR),
	.Zero(Zero)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// CLR
initial
begin
	CLR = 1'b1;
	CLR = #50000 1'b0;
end 

// CS
initial
begin
	CS = 1'b1;
end 

// WR
initial
begin
	WR = 1'b0;
	WR = #50000 1'b1;
end 
// Add_IN[ 3 ]
initial
begin
	Add_IN[3] = 1'b0;
end 
// Add_IN[ 2 ]
initial
begin
	Add_IN[2] = 1'b0;
	Add_IN[2] = #40000 1'b1;
	Add_IN[2] = #10000 1'b0;
end 
// Add_IN[ 1 ]
initial
begin
	Add_IN[1] = 1'b0;
	Add_IN[1] = #20000 1'b1;
	Add_IN[1] = #20000 1'b0;
end 
// Add_IN[ 0 ]
initial
begin
	Add_IN[0] = 1'b0;
	Add_IN[0] = #10000 1'b1;
	Add_IN[0] = #10000 1'b0;
	Add_IN[0] = #10000 1'b1;
	Add_IN[0] = #10000 1'b0;
end 
// \Input [ 15 ]
initial
begin
	Input[15] = 1'b0;
end 
// \Input [ 14 ]
initial
begin
	Input[14] = 1'b0;
end 
// \Input [ 13 ]
initial
begin
	Input[13] = 1'b0;
end 
// \Input [ 12 ]
initial
begin
	Input[12] = 1'b0;
end 
// \Input [ 11 ]
initial
begin
	Input[11] = 1'b0;
end 
// \Input [ 10 ]
initial
begin
	Input[10] = 1'b0;
end 
// \Input [ 9 ]
initial
begin
	Input[9] = 1'b0;
end 
// \Input [ 8 ]
initial
begin
	Input[8] = 1'b0;
end 
// \Input [ 7 ]
initial
begin
	Input[7] = 1'b0;
	Input[7] = #20000 1'b1;
	Input[7] = #10000 1'b0;
end 
// \Input [ 6 ]
initial
begin
	Input[6] = 1'b0;
	Input[6] = #20000 1'b1;
	Input[6] = #10000 1'b0;
	Input[6] = #10000 1'b1;
	Input[6] = #10000 1'b0;
end 
// \Input [ 5 ]
initial
begin
	Input[5] = 1'b1;
	Input[5] = #10000 1'b0;
	Input[5] = #30000 1'b1;
	Input[5] = #10000 1'b0;
end 
// \Input [ 4 ]
initial
begin
	Input[4] = 1'b1;
	Input[4] = #10000 1'b0;
	Input[4] = #30000 1'b1;
	Input[4] = #10000 1'b0;
end 
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b1;
	Input[3] = #10000 1'b0;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b1;
	Input[2] = #50000 1'b0;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b1;
	Input[1] = #50000 1'b0;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
	Input[0] = #30000 1'b1;
	Input[0] = #10000 1'b0;
end 

Sixteen_Bit_CPU_vlg_sample_tst tb_sample (
	.Add_IN(Add_IN),
	.CLK(CLK),
	.CLR(CLR),
	.CS(CS),
	.Input(Input),
	.WR(WR),
	.sampler_tx(sampler)
);

Sixteen_Bit_CPU_vlg_check_tst tb_out(
	.ABUS_O(ABUS_O),
	.ALU_OUT(ALU_OUT),
	.Code_IR(Code_IR),
	.EDR_O(EDR_O),
	.ERROR(ERROR),
	.ESUM_O(ESUM_O),
	.IDR_O(IDR_O),
	.IIR_O(IIR_O),
	.IMAR_O(IMAR_O),
	.IPC_O(IPC_O),
	.ISUM_O(ISUM_O),
	.Nege(Nege),
	.Over(Over),
	.R_O(R_O),
	.STOP(STOP),
	.Tap(Tap),
	.W_O(W_O),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule

